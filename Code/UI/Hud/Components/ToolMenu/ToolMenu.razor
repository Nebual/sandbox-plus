@using Sandbox.UI;
@using Sandbox.Tools;
@inherits Panel
@namespace Sandbox.UI
@attribute [StyleSheet]

<root>
	<div class="listcontainer">
		<MenuTextEntry @ref="SearchEntry" Placeholder="Quick Filter..." />
		<div class="toollist">
			@if (true)
			{
				var tools = GetTools();
				var groups = GetGroups(tools);
				foreach (var group in groups.OrderBy(x => x))
				{
					<label class="header">@group</label>
					foreach (var tool in tools.Where(x => x.Group == group).OrderBy(x => x.Title))
					{
						<div class="tool @(IsCurrentTool(tool.Type.TargetType) ? "active" : "")" onclick=@(() => GiveTool(tool))>
							@tool.Title
						</div>
					}
				}
			}
		</div>
	</div>
	<div class="inspector" @ref="InspectorPanel">

	</div>
</root>

@code
{
	public static ToolMenu Instance { get; private set; }

	MenuTextEntry SearchEntry;
	Panel InspectorPanel;

	string GetGroup(Type tool) => TypeLibrary.GetAttribute<LibraryAttribute>(tool)?.Group ?? "construction";

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);

		if (firstTime)
		{
			Instance = this;
			UpdateInspector();
		}
	}

	struct ToolInfo
	{
		public string Name; // id
		public string Title;
		public string Group;
		public TypeDescription Type;
	}
	List<ToolInfo> GetTools()
	{
		var tools = TypeLibrary.GetTypes<BaseTool>()
		.Where(x => !x.Name.StartsWith("Base"))
		.Select(x =>
		{
			var Type = TypeLibrary.GetAttribute<LibraryAttribute>(x.TargetType);
			return new ToolInfo
				{
					Name = x.Name,
					Title = Type?.Title ?? Type?.Name ?? "Missingtool.",
					Group = Type?.Group ?? "construction",
					Type = x
				};
		});

		if (!string.IsNullOrWhiteSpace(SearchEntry?.Text))
		{
			var text = SearchEntry.Text.ToLower();
			tools = tools.Where(x => x.Title.ToLower().Contains(text) || x.Group.ToLower().Contains(text));
		}

		return tools.ToList();
	}

	void GiveTool(ToolInfo tool)
	{
		ConsoleSystem.SetValue("tool_current", tool.Name);
		ConsoleSystem.Run("weapon_switch", "weapon_tool");
	}

	List<string> GetGroups(List<ToolInfo> tools)
	{
		var groups = new List<string>();
		foreach (var tool in tools)
		{
			var group = tool.Group;
			if (!groups.Contains(group))
			{
				groups.Add(group);
			}
		}
		return groups;
	}

	public void UpdateInspector()
	{
		if (!InspectorPanel.IsValid()) return;

		InspectorPanel.DeleteChildren();
		var toolgun = Player.Local?.Components.Get<ToolGun>(FindMode.EverythingInSelfAndDescendants);
		if (!toolgun.IsValid()) return;

		var tool = toolgun.CurrentTool;
		if (tool is null) return;

		var panelTypes = TypeLibrary.GetTypesWithAttribute<ToolInspectorAttribute>();
		var panelType = panelTypes.FirstOrDefault(x => x.Attribute.Type == tool.GetType());
		if (panelType.Type is not null)
		{
			var panel = TypeLibrary.Create<Panel>(panelType.Type.TargetType);
			InspectorPanel.AddChild(panel);
		}
		else
		{
			var defaultPanel = new DefaultToolInspector();
			InspectorPanel.AddChild(defaultPanel);
		}
	}

	bool IsCurrentTool(Type toolType)
	{
		var toolgun = Player.Local?.Components.Get<ToolGun>(FindMode.EverythingInSelfAndDescendants);
		if (toolgun.IsValid())
		{
			return toolgun?.CurrentTool?.GetType() == toolType;
		}
		return false;
	}

	protected override int BuildHash() => System.HashCode.Combine(SearchEntry?.Text);
}
