@using Sandbox.UI
@using Sandbox.UI.Construct

@inherits PanelComponent

<root class="@(IsVisible ? "spawnmenuopen" : "")">
	<div class="left">
		<div class="tabs" @ref="SpawnMenuLeftTabs">
			<div onclick=@(() => SetActiveLeft(LocalModelsPanel)) class="btn @(SelectedPanelLeft == LocalModelsPanel ? "active" : "")">
				<i>category</i>
				<label>#spawnmenu.props</label>
			</div>
			<div onclick=@(() => SetActiveLeft(CloudModelsPanel)) class="btn @(SelectedPanelLeft == CloudModelsPanel ? "active" : "")">
				<i>cloud_download</i>
				<label>#spawnmenu.modellist</label>
			</div>
			<div onclick=@(() => SetActiveLeft(CloudMapsPanel)) class="btn @(SelectedPanelLeft == CloudMapsPanel ? "active" : "")">
				<i>map</i>
				<label>Maps</label>
			</div>
		</div>
		<div class="body" @ref="SpawnMenuLeftBody">
			<CloudModelList @ref="CloudModelsPanel" />
			<LocalModelList @ref="LocalModelsPanel" />
			<CloudMapList @ref="CloudMapsPanel" />
			@* <EntityList /> *@
			@* <NpcList /> *@
		</div>
	</div>
	<div class="right">
		<div class="tabs">
			<div onclick=@(() => SetActiveRight(ToolsPanel)) class="btn @(SelectedPanelRight == ToolsPanel ? "active" : "")">
				<i>construction</i>
				<label>#spawnmenu.tools</label>
			</div>
			<div onclick=@(() => SetActiveRight(UtilitiesPanel)) class="btn @(SelectedPanelRight == UtilitiesPanel ? "active" : "")">
				<i>find_in_page</i>
				<label>#spawnmenu.utility</label>
			</div>
		</div>
		<div class="body">
			<ToolMenu @ref="ToolsPanel" />
			<UtilitiesMenu @ref="UtilitiesPanel" />
		</div>
	</div>
</root>

@code
{
    public static SpawnMenu Instance { get; protected set; }

	Panel LocalModelsPanel;
	Panel CloudModelsPanel;
	Panel CloudMapsPanel;
	Panel ToolsPanel;
	Panel UtilitiesPanel;

	Panel SelectedPanelLeft;
	Panel SelectedPanelRight;

    public Panel SpawnMenuLeftTabs  { get; private set; }
    public Panel SpawnMenuLeftBody { get; private set; }
    public bool IgnoreMenuButton = false;
	public bool IsVisible => (Input.Down("Menu") && !IgnoreMenuButton) || Panel.Children.Any(x => x.HasFocus);

	protected override void OnTreeFirstBuilt()
	{
        Instance = this;

		// todo: remove this when the "sandbox.hud.loaded" event works again
		DynShapeSpawnMenu.Initialize();
		SetActiveLeft(LocalModelsPanel);
		SetActiveRight(ToolsPanel);
	}
    protected override void OnTreeBuilt()
    {
		SandboxHud.Instance?.SetClass("spawnmenuopen", IsVisible);
    }
	public void SetActiveLeft(Panel panel)
	{
		SelectedPanelLeft = panel;
		SpawnMenuLeftBody.Children.ToList().ForEach(x => x.SetClass("hidden", x != SelectedPanelLeft));
	}

	void SetActiveRight(Panel panel)
	{
		ToolsPanel.SetClass("hidden", ToolsPanel != panel);
		UtilitiesPanel.SetClass("hidden", UtilitiesPanel != panel);
		SelectedPanelRight = panel;
	}

	protected override void OnFixedUpdate()
	{
		if (Input.Pressed("attack1"))
		{
			Panel.Children.FirstOrDefault(x => x.HasFocus)?.Blur();
			Panel?.Blur();
		}
	}
	protected override int BuildHash() => System.HashCode.Combine(SelectedPanelLeft ?? null, SelectedPanelRight ?? null, IsVisible);
}
